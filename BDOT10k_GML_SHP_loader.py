# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BDOT10k_GML_SHP_loader
                                 A QGIS plugin
 Importuje BDOT10k w formacie GML albo SHP
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Marcin Lebiecki / Główny Urząd Geodezji i Kartografii
        email                : marcin.lebiecki@gugik.gov.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.core import *
from qgis.utils import *
from qgis.gui import *
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog,QProgressBar,QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
from shutil import copyfile
import os.path
import re
import time
import shutil
from pathlib import Path


class BDOT10k_GML_SHP_loader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BDOT10k_GML_SHP_loader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&BDOT10k_GML_SHP')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BDOT10k_GML_SHP_loader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/BDOT10k_GML_SHP_loader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import BDOT10k GML / SHP'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&BDOT10k_GML_SHP'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        if self.first_start == True:
            self.first_start = False
        
        powiat ={
        "0265" : "WAŁBRZYCH",
        "0201" : "BOLESŁAWIECKI",
        "0203" : "GŁOGOWSKI",
        "0204" : "GÓROWSKI",
        "0205" : "JAWORSKI",
        "0206" : "JELENIOGÓRSKI",
        "0207" : "KAMIENNOGÓRSKI",
        "0208" : "KŁODZKI",
        "0209" : "LEGNICKI",
        "0210" : "LUBAŃSKI",
        "0211" : "LUBIŃSKI",
        "0212" : "LWÓWECKI",
        "0213" : "MILICKI",
        "0215" : "OŁAWSKI",
        "0216" : "POLKOWICKI",
        "0217" : "STRZELIŃSKI",
        "0219" : "ŚWIDNICKI",
        "0220" : "TRZEBNICKI",
        "0221" : "WAŁBRZYSKI",
        "0222" : "WOŁOWSKI",
        "0225" : "ZGORZELECKI",
        "0226" : "ZŁOTORYJSKI",
        "0261" : "JELENIA GÓRA",
        "0264" : "WROCŁAW",
        "0202" : "DZIERŻONIOWSKI",
        "0224" : "ZĄBKOWICKI",
        "0214" : "OLEŚNICKI",
        "0218" : "ŚREDZKI",
        "0223" : "WROCŁAWSKI",
        "0262" : "LEGNICA",
        "0403" : "BYDGOSKI",
        "0408" : "LIPNOWSKI",
        "0464" : "WŁOCŁAWEK",
        "0401" : "ALEKSANDROWSKI",
        "0402" : "BRODNICKI",
        "0404" : "CHEŁMIŃSKI",
        "0405" : "GOLUBSKO-DOBRZYŃSKI",
        "0406" : "GRUDZIĄDZKI",
        "0407" : "INOWROCŁAWSKI",
        "0409" : "MOGILEŃSKI",
        "0410" : "NAKIELSKI",
        "0411" : "RADZIEJOWSKI",
        "0412" : "RYPIŃSKI",
        "0414" : "ŚWIECKI",
        "0415" : "TORUŃSKI",
        "0416" : "TUCHOLSKI",
        "0417" : "WĄBRZESKI",
        "0418" : "WŁOCŁAWSKI",
        "0419" : "ŻNIŃSKI",
        "0461" : "BYDGOSZCZ",
        "0462" : "GRUDZIĄDZ",
        "0463" : "TORUŃ",
        "0413" : "SĘPOLEŃSKI",
        "0611" : "ŁUKOWSKI",
        "0615" : "RADZYŃSKI",
        "0619" : "WŁODAWSKI",
        "0664" : "ZAMOŚĆ",
        "0605" : "JANOWSKI",
        "0610" : "ŁĘCZYŃSKI",
        "0601" : "BIALSKI",
        "0602" : "BIŁGORAJSKI",
        "0618" : "TOMASZOWSKI",
        "0603" : "CHEŁMSKI",
        "0604" : "HRUBIESZOWSKI",
        "0606" : "KRASNOSTAWSKI",
        "0607" : "KRAŚNICKI",
        "0608" : "LUBARTOWSKI",
        "0609" : "LUBELSKI",
        "0612" : "OPOLSKI",
        "0613" : "PARCZEWSKI",
        "0614" : "PUŁAWSKI",
        "0616" : "RYCKI",
        "0617" : "ŚWIDNICKI",
        "0620" : "ZAMOJSKI",
        "0661" : "BIAŁA PODLASKA",
        "0662" : "CHEŁM",
        "0663" : "LUBLIN",
        "0804" : "NOWOSOLSKI",
        "0812" : "WSCHOWSKI",
        "0801" : "GORZOWSKI",
        "0802" : "KROŚNIEŃSKI",
        "0803" : "MIĘDZYRZECKI",
        "0805" : "SŁUBICKI",
        "0806" : "STRZELECKO-DREZDENECKI",
        "0807" : "SULĘCIŃSKI",
        "0808" : "ŚWIEBODZIŃSKI",
        "0809" : "ZIELONOGÓRSKI",
        "0810" : "ŻAGAŃSKI",
        "0811" : "ŻARSKI",
        "0861" : "GORZÓW WIELKOPOLSKI",
        "0862" : "ZIELONA GÓRA",
        "1062" : "PIOTRKÓW TRYBUNALSKI",
        "1063" : "SKIERNIEWICE",
        "1015" : "SKIERNIEWICKI",
        "1020" : "ZGIERSKI",
        "1014" : "SIERADZKI",
        "1021" : "BRZEZIŃSKI",
        "1008" : "PABIANICKI",
        "1061" : "ŁÓDŹ",
        "1001" : "BEŁCHATOWSKI",
        "1002" : "KUTNOWSKI",
        "1003" : "ŁASKI",
        "1004" : "ŁĘCZYCKI",
        "1005" : "ŁOWICKI",
        "1006" : "ŁÓDZKI WSCHODNI",
        "1007" : "OPOCZYŃSKI",
        "1009" : "PAJĘCZAŃSKI",
        "1010" : "PIOTRKOWSKI",
        "1011" : "PODDĘBICKI",
        "1012" : "RADOMSZCZAŃSKI",
        "1013" : "RAWSKI",
        "1016" : "TOMASZOWSKI",
        "1017" : "WIELUŃSKI",
        "1018" : "WIERUSZOWSKI",
        "1019" : "ZDUŃSKOWOLSKI",
        "1202" : "BRZESKI",
        "1201" : "BOCHEŃSKI",
        "1206" : "KRAKOWSKI",
        "1211" : "NOWOTARSKI",
        "1217" : "TATRZAŃSKI",
        "1218" : "WADOWICKI",
        "1219" : "WIELICKI",
        "1261" : "KRAKÓW",
        "1262" : "NOWY SĄCZ",
        "1263" : "TARNÓW",
        "1203" : "CHRZANOWSKI",
        "1204" : "DĄBROWSKI",
        "1205" : "GORLICKI",
        "1207" : "LIMANOWSKI",
        "1208" : "MIECHOWSKI",
        "1209" : "MYŚLENICKI",
        "1210" : "NOWOSĄDECKI",
        "1212" : "OLKUSKI",
        "1213" : "OŚWIĘCIMSKI",
        "1215" : "SUSKI",
        "1216" : "TARNOWSKI",
        "1214" : "PROSZOWICKI",
        "1401" : "BIAŁOBRZESKI",
        "1403" : "GARWOLIŃSKI",
        "1404" : "GOSTYNIŃSKI",
        "1405" : "GRODZISKI",
        "1407" : "KOZIENICKI",
        "1409" : "LIPSKI",
        "1410" : "ŁOSICKI",
        "1411" : "MAKOWSKI",
        "1412" : "MIŃSKI",
        "1414" : "NOWODWORSKI",
        "1415" : "OSTROŁĘCKI",
        "1417" : "OTWOCKI",
        "1418" : "PIASECZYŃSKI",
        "1419" : "PŁOCKI",
        "1421" : "PRUSZKOWSKI",
        "1422" : "PRZASNYSKI",
        "1424" : "PUŁTUSKI",
        "1426" : "SIEDLECKI",
        "1427" : "SIERPECKI",
        "1428" : "SOCHACZEWSKI",
        "1429" : "SOKOŁOWSKI",
        "1432" : "WARSZAWSKI ZACHODNI",
        "1433" : "WĘGROWSKI",
        "1434" : "WOŁOMIŃSKI",
        "1435" : "WYSZKOWSKI",
        "1437" : "ŻUROMIŃSKI",
        "1438" : "ŻYRARDOWSKI",
        "1461" : "OSTROŁĘKA",
        "1462" : "PŁOCK",
        "1464" : "SIEDLCE",
        "1402" : "CIECHANOWSKI",
        "1408" : "LEGIONOWSKI",
        "1406" : "GRÓJECKI",
        "1423" : "PRZYSUSKI",
        "1465" : "WARSZAWA",
        "1413" : "MŁAWSKI",
        "1430" : "SZYDŁOWIECKI",
        "1416" : "OSTROWSKI",
        "1420" : "PŁOŃSKI",
        "1425" : "RADOMSKI",
        "1436" : "ZWOLEŃSKI",
        "1463" : "RADOM",
        "1601" : "BRZESKI",
        "1602" : "GŁUBCZYCKI",
        "1604" : "KLUCZBORSKI",
        "1605" : "KRAPKOWICKI",
        "1606" : "NAMYSŁOWSKI",
        "1607" : "NYSKI",
        "1608" : "OLESKI",
        "1610" : "PRUDNICKI",
        "1611" : "STRZELECKI",
        "1661" : "OPOLE",
        "1603" : "KĘDZIERZYŃSKO-KOZIELSKI",
        "1609" : "OPOLSKI",
        "1801" : "BIESZCZADZKI",
        "1802" : "BRZOZOWSKI",
        "1804" : "JAROSŁAWSKI",
        "1805" : "JASIELSKI",
        "1806" : "KOLBUSZOWSKI",
        "1807" : "KROŚNIEŃSKI",
        "1809" : "LUBACZOWSKI",
        "1810" : "ŁAŃCUCKI",
        "1811" : "MIELECKI",
        "1813" : "PRZEMYSKI",
        "1814" : "PRZEWORSKI",
        "1815" : "ROPCZYCKO-SĘDZISZOWSKI",
        "1816" : "RZESZOWSKI",
        "1818" : "STALOWOWOLSKI",
        "1819" : "STRZYŻOWSKI",
        "1820" : "TARNOBRZESKI",
        "1821" : "LESKI",
        "1862" : "PRZEMYŚL",
        "1863" : "RZESZÓW",
        "1864" : "TARNOBRZEG",
        "1803" : "DĘBICKI",
        "1808" : "LEŻAJSKI",
        "1812" : "NIŻAŃSKI",
        "1817" : "SANOCKI",
        "1861" : "KROSNO",
        "2002" : "BIAŁOSTOCKI",
        "2004" : "GRAJEWSKI",
        "2005" : "HAJNOWSKI",
        "2007" : "ŁOMŻYŃSKI",
        "2008" : "MONIECKI",
        "2009" : "SEJNEŃSKI",
        "2010" : "SIEMIATYCKI",
        "2012" : "SUWALSKI",
        "2013" : "WYSOKOMAZOWIECKI",
        "2014" : "ZAMBROWSKI",
        "2061" : "BIAŁYSTOK",
        "2062" : "ŁOMŻA",
        "2011" : "SOKÓLSKI",
        "2063" : "SUWAŁKI",
        "2003" : "BIELSKI",
        "2001" : "AUGUSTOWSKI",
        "2006" : "KOLNEŃSKI",
        "2201" : "BYTOWSKI",
        "2202" : "CHOJNICKI",
        "2203" : "CZŁUCHOWSKI",
        "2204" : "GDAŃSKI",
        "2205" : "KARTUSKI",
        "2262" : "GDYNIA",
        "2207" : "KWIDZYŃSKI",
        "2208" : "LĘBORSKI",
        "2209" : "MALBORSKI",
        "2210" : "NOWODWORSKI",
        "2211" : "PUCKI",
        "2213" : "STAROGARDZKI",
        "2214" : "TCZEWSKI",
        "2215" : "WEJHEROWSKI",
        "2216" : "SZTUMSKI",
        "2261" : "GDAŃSK",
        "2263" : "SŁUPSK",
        "2264" : "SOPOT",
        "2206" : "KOŚCIERSKI",
        "2212" : "SŁUPSKI",
        "2461" : "BIELSKO-BIAŁA",
        "2467" : "JASTRZĘBIE-ZDRÓJ",
        "2472" : "RUDA ŚLĄSKA",
        "2401" : "BĘDZIŃSKI",
        "2403" : "CIESZYŃSKI",
        "2404" : "CZĘSTOCHOWSKI",
        "2405" : "GLIWICKI",
        "2406" : "KŁOBUCKI",
        "2407" : "LUBLINIECKI",
        "2410" : "PSZCZYŃSKI",
        "2411" : "RACIBORSKI",
        "2414" : "BIERUŃSKO-LĘDZIŃSKI",
        "2415" : "WODZISŁAWSKI",
        "2416" : "ZAWIERCIAŃSKI",
        "2417" : "ŻYWIECKI",
        "2462" : "BYTOM",
        "2463" : "CHORZÓW",
        "2464" : "CZĘSTOCHOWA",
        "2465" : "DĄBROWA GÓRNICZA",
        "2466" : "GLIWICE",
        "2468" : "JAWORZNO",
        "2470" : "MYSŁOWICE",
        "2471" : "PIEKARY ŚLĄSKIE",
        "2473" : "RYBNIK",
        "2474" : "SIEMIANOWICE ŚLĄSKIE",
        "2475" : "SOSNOWIEC",
        "2476" : "ŚWIĘTOCHŁOWICE",
        "2477" : "TYCHY",
        "2478" : "ZABRZE",
        "2479" : "ŻORY",
        "2413" : "TARNOGÓRSKI",
        "2409" : "MYSZKOWSKI",
        "2469" : "KATOWICE",
        "2402" : "BIELSKI",
        "2408" : "MIKOŁOWSKI",
        "2412" : "RYBNICKI",
        "2607" : "OSTROWIECKI",
        "2601" : "BUSKI",
        "2603" : "KAZIMIERSKI",
        "2604" : "KIELECKI",
        "2606" : "OPATOWSKI",
        "2608" : "PIŃCZOWSKI",
        "2609" : "SANDOMIERSKI",
        "2610" : "SKARŻYSKI",
        "2612" : "STASZOWSKI",
        "2613" : "WŁOSZCZOWSKI",
        "2661" : "KIELCE",
        "2605" : "KONECKI",
        "2602" : "JĘDRZEJOWSKI",
        "2611" : "STARACHOWICKI",
        "2808" : "KĘTRZYŃSKI",
        "2815" : "OSTRÓDZKI",
        "2862" : "OLSZTYN",
        "2801" : "BARTOSZYCKI",
        "2804" : "ELBLĄSKI",
        "2805" : "EŁCKI",
        "2807" : "IŁAWSKI",
        "2809" : "LIDZBARSKI",
        "2810" : "MRĄGOWSKI",
        "2812" : "NOWOMIEJSKI",
        "2813" : "OLECKI",
        "2814" : "OLSZTYŃSKI",
        "2816" : "PISKI",
        "2817" : "SZCZYCIEŃSKI",
        "2818" : "GOŁDAPSKI",
        "2861" : "ELBLĄG",
        "2819" : "WĘGORZEWSKI",
        "2803" : "DZIAŁDOWSKI",
        "2802" : "BRANIEWSKI",
        "2806" : "GIŻYCKI",
        "2811" : "NIDZICKI",
        "3025" : "ŚREDZKI",
        "3061" : "KALISZ",
        "3001" : "CHODZIESKI",
        "3064" : "POZNAŃ",
        "3002" : "CZARNKOWSKO-TRZCIANECKI",
        "3003" : "GNIEŹNIEŃSKI",
        "3004" : "GOSTYŃSKI",
        "3005" : "GRODZISKI",
        "3006" : "JAROCIŃSKI",
        "3007" : "KALISKI",
        "3008" : "KĘPIŃSKI",
        "3009" : "KOLSKI",
        "3011" : "KOŚCIAŃSKI",
        "3012" : "KROTOSZYŃSKI",
        "3013" : "LESZCZYŃSKI",
        "3014" : "MIĘDZYCHODZKI",
        "3015" : "NOWOTOMYSKI",
        "3016" : "OBORNICKI",
        "3017" : "OSTROWSKI",
        "3018" : "OSTRZESZOWSKI",
        "3019" : "PILSKI",
        "3020" : "PLESZEWSKI",
        "3021" : "POZNAŃSKI",
        "3022" : "RAWICKI",
        "3024" : "SZAMOTULSKI",
        "3026" : "ŚREMSKI",
        "3028" : "WĄGROWIECKI",
        "3029" : "WOLSZTYŃSKI",
        "3030" : "WRZESIŃSKI",
        "3062" : "KONIN",
        "3063" : "LESZNO",
        "3010" : "KONIŃSKI",
        "3023" : "SŁUPECKI",
        "3027" : "TURECKI",
        "3031" : "ZŁOTOWSKI",
        "3201" : "BIAŁOGARDZKI",
        "3203" : "DRAWSKI",
        "3208" : "KOŁOBRZESKI",
        "3214" : "STARGARDZKI",
        "3262" : "SZCZECIN",
        "3202" : "CHOSZCZEŃSKI",
        "3204" : "GOLENIOWSKI",
        "3205" : "GRYFICKI",
        "3209" : "KOSZALIŃSKI",
        "3210" : "MYŚLIBORSKI",
        "3212" : "PYRZYCKI",
        "3213" : "SŁAWIEŃSKI",
        "3215" : "SZCZECINECKI",
        "3216" : "ŚWIDWIŃSKI",
        "3217" : "WAŁECKI",
        "3218" : "ŁOBESKI",
        "3261" : "KOSZALIN",
        "3207" : "KAMIEŃSKI",
        "3263" : "ŚWINOUJŚCIE",
        "3206" : "GRYFIŃSKI",
        "3211" : "POLICKI"}        
        
        folder_path = QFileDialog.getExistingDirectory(self.iface.mainWindow(),'Wybierz folder BDOT10k')
        path = folder_path.replace("\\", "/")+"/"
        result = False
        files = None
        
        if folder_path == '':
            folder_path = 'c:/'
        
        for file in os.listdir(folder_path):
            if (file.endswith(".xml") or file.endswith(".shp")) and re.match("PL\.PZGiK\.\d{3,4}\.\d{4}(__OT_|_OT_)", file):
                    result = True
                    przestrzen_nazw = str(re.split("__", file)[0])
                    if file.endswith(".xml"):
                        formatPliku = "xml"
                    if file.endswith(".shp"):
                        formatPliku = "shp"

        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            qmlPath = Path(QgsApplication.qgisSettingsDirPath())/Path("python/plugins/BDOT10k_GML_SHP_Loader/BDOT10k_QML/")
            gfsPath = Path(QgsApplication.qgisSettingsDirPath())/Path("python/plugins/BDOT10k_GML_SHP_Loader/BDOT10k_GFS/")
            svgPluginPath = Path(QgsApplication.qgisSettingsDirPath())/Path("python/plugins/BDOT10k_GML_SHP_Loader/BDOT10k_SVG/KARTO10k/")
            svgQGISpath = Path(QgsApplication.qgisSettingsDirPath())/Path("SVG/")
            
            #kopiuje pliki SVG na konto uzytkownika
            try:
                shutil.copytree(svgPluginPath, svgQGISpath/Path("KARTO10k"))
            except:
                pass
            
            progressMessageBar = iface.messageBar().createMessage("Postęp importowania BDOT10k...")
            progress = QProgressBar()
            progress.setMaximum(86)
            progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
            progressMessageBar.layout().addWidget(progress)
            iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)

            teryt = przestrzen_nazw[-4:]
            nazwa_powiatu = powiat[teryt]
            groupName = 'BDOT10k POWIAT '+nazwa_powiatu
            root = QgsProject.instance().layerTreeRoot()
            group = root.addGroup(groupName)
            group.setExpanded(False)
            if formatPliku=="xml":
                groupSlowniki = group.addGroup(przestrzen_nazw+' wykazy')
                groupSlowniki.setExpanded(False)
            groupNapisy = group.addGroup(przestrzen_nazw+' napisy')
            groupNapisy.setExpanded(False)
            groupPunktowe = group.addGroup(przestrzen_nazw+' znaki punktowe')
            groupPunktowe.setExpanded(False)

            if os.path.exists(path+przestrzen_nazw+'__OT_Ulica.'+formatPliku):
                copyfile(qmlPath/Path("OT_Ulica.qml"), path+przestrzen_nazw+'__OT_Ulica.qml')
                OT_Ulica = QgsVectorLayer(path+przestrzen_nazw+"__OT_Ulica."+formatPliku, przestrzen_nazw+"__OT_Ulica","ogr")
                if OT_Ulica.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_Ulica, False)
                    groupSlowniki.addLayer(OT_Ulica)
                else:
                    OT_Ulica = None
            if os.path.exists(path+przestrzen_nazw+'__OT_SzlakDrogowy.'+formatPliku):                
                copyfile(qmlPath/Path("OT_SzlakDrogowy.qml"), path+przestrzen_nazw+'__OT_SzlakDrogowy.qml')
                OT_SzlakDrogowy = QgsVectorLayer(path+przestrzen_nazw+"__OT_SzlakDrogowy."+formatPliku, przestrzen_nazw+"__OT_SzlakDrogowy","ogr")
                if OT_SzlakDrogowy.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SzlakDrogowy, False)
                    groupSlowniki.addLayer(OT_SzlakDrogowy)
                else:
                    OT_SzlakDrogowy = None
            if os.path.exists(path+przestrzen_nazw+'__OT_Port.'+formatPliku):
                copyfile(qmlPath/Path("OT_Port.qml"), path+przestrzen_nazw+'__OT_Port.qml')
                OT_Port = QgsVectorLayer(path+przestrzen_nazw+"__OT_Port."+formatPliku, przestrzen_nazw+"__OT_Port","ogr")
                if OT_Port.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_Port, False)
                    groupSlowniki.addLayer(OT_Port)
                else:
                    OT_Port = None
            if os.path.exists(path+przestrzen_nazw+'__OT_Lotnisko.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_Lotnisko.gfs"), path+przestrzen_nazw+'__OT_Lotnisko.gfs')
                copyfile(qmlPath/Path("OT_Lotnisko.qml"), path+przestrzen_nazw+'__OT_Lotnisko.qml')
                OT_Lotnisko = QgsVectorLayer(path+przestrzen_nazw+"__OT_Lotnisko."+formatPliku, przestrzen_nazw+"__OT_Lotnisko","ogr")
                if OT_Lotnisko.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_Lotnisko, False)
                    groupSlowniki.addLayer(OT_Lotnisko)
                else:
                    OT_Lotnisko = None
            if os.path.exists(path+przestrzen_nazw+'__OT_LiniaKolejowa.'+formatPliku):
                copyfile(qmlPath/Path("OT_LiniaKolejowa.qml"), path+przestrzen_nazw+'__OT_LiniaKolejowa.qml')
                OT_LiniaKolejowa = QgsVectorLayer(path+przestrzen_nazw+"__OT_LiniaKolejowa."+formatPliku, przestrzen_nazw+"__OT_LiniaKolejowa","ogr")
                if OT_LiniaKolejowa.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_LiniaKolejowa, False)
                    groupSlowniki.addLayer(OT_LiniaKolejowa)
                else:
                    OT_LiniaKolejowa = None
            if os.path.exists(path+przestrzen_nazw+'__OT_Kopalnia.'+formatPliku):
                copyfile(qmlPath/Path("OT_Kopalnia.qml"), path+przestrzen_nazw+'__OT_Kopalnia.qml')
                OT_Kopalnia = QgsVectorLayer(path+przestrzen_nazw+"__OT_Kopalnia."+formatPliku, przestrzen_nazw+"__OT_Kopalnia","ogr")
                if OT_Kopalnia.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_Kopalnia, False)
                    groupSlowniki.addLayer(OT_Kopalnia)
                else:
                    OT_Kopalnia = None
            if os.path.exists(path+przestrzen_nazw+'__OT_Elektrownia.'+formatPliku):
                copyfile(qmlPath/Path("OT_Elektrownia.qml"), path+przestrzen_nazw+'__OT_Elektrownia.qml')
                OT_Elektrownia = QgsVectorLayer(path+przestrzen_nazw+"__OT_Elektrownia."+formatPliku, przestrzen_nazw+"__OT_Elektrownia","ogr")
                if OT_Elektrownia.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_Elektrownia, False)
                    groupSlowniki.addLayer(OT_Elektrownia)
                else:
                    OT_Elektrownia = None
            if os.path.exists(path+przestrzen_nazw+'__OT_Ciek.'+formatPliku):
                copyfile(qmlPath/Path("OT_Ciek.qml"), path+przestrzen_nazw+'__OT_Ciek.qml')
                OT_Ciek = QgsVectorLayer(path+przestrzen_nazw+"__OT_Ciek."+formatPliku, przestrzen_nazw+"__OT_Ciek","ogr")
                if OT_Ciek.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_Ciek, False)
                    groupSlowniki.addLayer(OT_Ciek)
                else:
                    OT_Ciek = None
            progress.setValue(1)
            if os.path.exists(path+przestrzen_nazw+'__OT_ZbiornikWodny.'+formatPliku):
                copyfile(qmlPath/Path("OT_ZbiornikWodny.qml"), path+przestrzen_nazw+'__OT_ZbiornikWodny.qml')
                OT_ZbiornikWodny = QgsVectorLayer(path+przestrzen_nazw+"__OT_ZbiornikWodny."+formatPliku, przestrzen_nazw+"__OT_ZbiornikWodny","ogr")
                if OT_ZbiornikWodny.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_ZbiornikWodny, False)
                    groupSlowniki.addLayer(OT_ZbiornikWodny)
                else:
                    OT_ZbiornikWodny = None
            progress.setValue(2)
            if os.path.exists(path+przestrzen_nazw+'__OT_WezelKolejowy.'+formatPliku):
                copyfile(qmlPath/Path("OT_WezelKolejowy.qml"), path+przestrzen_nazw+'__OT_WezelKolejowy.qml')
                OT_WezelKolejowy = QgsVectorLayer(path+przestrzen_nazw+"__OT_WezelKolejowy."+formatPliku, przestrzen_nazw+"__OT_WezelKolejowy","ogr")
                if OT_WezelKolejowy.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_WezelKolejowy, False)
                    groupSlowniki.addLayer(OT_WezelKolejowy)
                else:
                    OT_WezelKolejowy = None
            progress.setValue(3)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUBD_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUBD_A inf dod.qml"), path+przestrzen_nazw+'__OT_BUBD_A inf dod.qml')
                OT_BUBD_A_inf_dod = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUBD_A."+formatPliku, przestrzen_nazw+"__OT_BUBD_A inf dod","ogr")
                if OT_BUBD_A_inf_dod.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUBD_A_inf_dod, False)
                    groupNapisy.addLayer(OT_BUBD_A_inf_dod)
                    OT_BUBD_A_inf_dod.loadNamedStyle(path+przestrzen_nazw+'__OT_BUBD_A inf dod.qml')
                    myLayerNode = root.findLayer(OT_BUBD_A_inf_dod.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUBD_A_inf_dod = None
            progress.setValue(4)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKJZ_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SKJZ_L.gfs"), path+przestrzen_nazw+'__OT_SKJZ_L.gfs')
                copyfile(qmlPath/Path("szlaki drogowe.qml"), path+przestrzen_nazw+'__szlaki drogowe.qml')
                copyfile(qmlPath/Path("nazwy ulic.qml"), path+przestrzen_nazw+'__nazwy ulic.qml')
                szlaki_drogowe = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKJZ_L."+formatPliku, przestrzen_nazw+"__szlaki drogowe","ogr")
                nazwy_ulic = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKJZ_L."+formatPliku, przestrzen_nazw+"__nazwy ulic","ogr")                
                if szlaki_drogowe.featureCount()>0:
                    QgsProject.instance().addMapLayer(szlaki_drogowe, False)
                    groupNapisy.addLayer(szlaki_drogowe)
                    szlaki_drogowe.loadNamedStyle(path+przestrzen_nazw+'__szlaki drogowe.qml')
                    QgsProject.instance().addMapLayer(nazwy_ulic, False)
                    groupNapisy.addLayer(nazwy_ulic)
                    nazwy_ulic.loadNamedStyle(path+przestrzen_nazw+'__nazwy ulic.qml')
                    myLayerNode = root.findLayer(nazwy_ulic.id())
                    myLayerNode.setExpanded(False)
                    myLayerNode = root.findLayer(szlaki_drogowe.id())
                    myLayerNode.setExpanded(False)
                else:
                    nazwy_ulic = None
                    szlaki_drogowe = None
            progress.setValue(5)
            if os.path.exists(path+przestrzen_nazw+'__OT_SWKN_L.'+formatPliku):
                copyfile(qmlPath/Path("nazwy kanalow - nad linia.qml"), path+przestrzen_nazw+'__nazwy kanalow - nad linia.qml')
                copyfile(qmlPath/Path("nazwy kanalow - na linii.qml"), path+przestrzen_nazw+'__nazwy kanalow - na linii.qml')
                nazwy_kanalow_nad_linia = QgsVectorLayer(path+przestrzen_nazw+"__OT_SWKN_L."+formatPliku, przestrzen_nazw+"__nazwy kanalow - nad linia","ogr")
                if nazwy_kanalow_nad_linia.featureCount()>0:
                    QgsProject.instance().addMapLayer(nazwy_kanalow_nad_linia, False)
                    groupNapisy.addLayer(nazwy_kanalow_nad_linia)
                    nazwy_kanalow_nad_linia.loadNamedStyle(path+przestrzen_nazw+'__nazwy kanalow - nad linia.qml')
                    myLayerNode = root.findLayer(nazwy_kanalow_nad_linia.id())
                    myLayerNode.setExpanded(False)
                else:
                    nazwy_kanalow_nad_linia = None
                nazwy_kanalow_na_linii = QgsVectorLayer(path+przestrzen_nazw+"__OT_SWKN_L."+formatPliku, przestrzen_nazw+"__nazwy kanalow - na linii","ogr")
                if nazwy_kanalow_na_linii.featureCount()>0:
                    QgsProject.instance().addMapLayer(nazwy_kanalow_na_linii, False)
                    groupNapisy.addLayer(nazwy_kanalow_na_linii)
                    nazwy_kanalow_na_linii.loadNamedStyle(path+przestrzen_nazw+'__nazwy kanalow - na linii.qml')
                    myLayerNode = root.findLayer(nazwy_kanalow_na_linii.id())
                    myLayerNode.setExpanded(False)
                else:
                    nazwy_kanalow_na_linii = None
            progress.setValue(6)            
            if os.path.exists(path+przestrzen_nazw+'__OT_PTLZ_A.'+formatPliku):
                copyfile(qmlPath/Path("nazwy placow.qml"), path+przestrzen_nazw+'__nazwy placow.qml')
                nazwy_placow = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTPL_A."+formatPliku, przestrzen_nazw+"__nazwy placow","ogr")
                if nazwy_placow.featureCount()>0:
                    QgsProject.instance().addMapLayer(nazwy_placow, False)
                    groupNapisy.addLayer(nazwy_placow)
                    nazwy_placow.loadNamedStyle(path+przestrzen_nazw+'__nazwy placow.qml')
                    myLayerNode = root.findLayer(nazwy_placow.id())
                    myLayerNode.setExpanded(False)
                else:
                    nazwy_placow = None
            progress.setValue(7)            
            if os.path.exists(path+przestrzen_nazw+'__OT_SWRS_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SWRS_L.gfs"), path+przestrzen_nazw+'__OT_SWRS_L.gfs')
                copyfile(qmlPath/Path("nazwy rzek - nad linia.qml"), path+przestrzen_nazw+'__nazwy rzek - nad linia.qml')
                nazwy_rzek_nad_linia = QgsVectorLayer(path+przestrzen_nazw+"__OT_SWRS_L."+formatPliku, przestrzen_nazw+"__nazwy rzek - nad linia","ogr")
                if nazwy_rzek_nad_linia.featureCount()>0:
                    copyfile(qmlPath/Path("nazwy rzek - na linii.qml"), path+przestrzen_nazw+'__nazwy rzek - na linii.qml')
                    nazwy_rzek_na_linii = QgsVectorLayer(path+przestrzen_nazw+"__OT_SWRS_L."+formatPliku, przestrzen_nazw+"__nazwy rzek - na linii","ogr")
                    QgsProject.instance().addMapLayer(nazwy_rzek_nad_linia, False)
                    groupNapisy.addLayer(nazwy_rzek_nad_linia)
                    nazwy_rzek_nad_linia.loadNamedStyle(path+przestrzen_nazw+'__nazwy rzek - nad linia.qml')
                    QgsProject.instance().addMapLayer(nazwy_rzek_na_linii, False)
                    groupNapisy.addLayer(nazwy_rzek_na_linii)
                    nazwy_rzek_na_linii.loadNamedStyle(path+przestrzen_nazw+'__nazwy rzek - na linii.qml')
                    myLayerNode = root.findLayer(nazwy_rzek_nad_linia.id())
                    myLayerNode.setExpanded(False)
                    myLayerNode = root.findLayer(nazwy_rzek_na_linii.id())
                    myLayerNode.setExpanded(False)
                else:
                    nazwy_rzek_nad_linia = None
                    nazwy_rzek_na_linii = None
            progress.setValue(8)            
            if os.path.exists(path+przestrzen_nazw+'__OT_ADMS_P.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_ADMS_P.gfs"), path+przestrzen_nazw+'__OT_ADMS_P.gfs')
                copyfile(qmlPath/Path("OT_ADMS_P Msc.qml"), path+przestrzen_nazw+'__OT_ADMS_P Msc.qml')
                OT_ADMS_P_Msc = QgsVectorLayer(path+przestrzen_nazw+"__OT_ADMS_P."+formatPliku, przestrzen_nazw+"__OT_ADMS_P Msc","ogr")
                if OT_ADMS_P_Msc.featureCount()>0:
                    if formatPliku=="xml":
                        OT_ADMS_P_Msc.setSubsetString("rodzaj = 'Ms'")
                    if formatPliku=="shp":
                        OT_ADMS_P_Msc.setSubsetString("RODZAJ = 'miasto'")
                    copyfile(qmlPath/Path("OT_ADMS_P Cms.qml"), path+przestrzen_nazw+'__OT_ADMS_P Cms.qml')
                    OT_ADMS_P_Cms = QgsVectorLayer(path+przestrzen_nazw+"__OT_ADMS_P."+formatPliku, przestrzen_nazw+"__OT_ADMS_P Cms","ogr")
                    if formatPliku=="xml":
                        OT_ADMS_P_Cms.setSubsetString("rodzaj  = 'CMs'")
                    if formatPliku=="shp":
                        OT_ADMS_P_Cms.setSubsetString("RODZAJ = 'czescMiasta'")
                    copyfile(qmlPath/Path("OT_ADMS_P Ws Cws.qml"), path+przestrzen_nazw+'__OT_ADMS_P Ws Cws.qml')
                    OT_ADMS_P_WsCws = QgsVectorLayer(path+przestrzen_nazw+"__OT_ADMS_P."+formatPliku, przestrzen_nazw+"__OT_ADMS_P Ws Cws","ogr")
                    if formatPliku=="xml":
                        OT_ADMS_P_WsCws.setSubsetString("rodzaj = 'Ws' OR rodzaj = 'CWs'")
                    if formatPliku=="shp":
                        OT_ADMS_P_WsCws.setSubsetString("RODZAJ = 'wies' OR RODZAJ = 'czescWsi'")
                    QgsProject.instance().addMapLayer(OT_ADMS_P_Msc, False)
                    groupNapisy.addLayer(OT_ADMS_P_Msc)
                    OT_ADMS_P_Msc.loadNamedStyle(path+przestrzen_nazw+'__OT_ADMS_P Msc.qml')
                    QgsProject.instance().addMapLayer(OT_ADMS_P_Cms, False)
                    groupNapisy.addLayer(OT_ADMS_P_Cms)
                    OT_ADMS_P_Cms.loadNamedStyle(path+przestrzen_nazw+'__OT_ADMS_P Cms.qml')
                    QgsProject.instance().addMapLayer(OT_ADMS_P_WsCws, False)
                    groupNapisy.addLayer(OT_ADMS_P_WsCws)
                    OT_ADMS_P_WsCws.loadNamedStyle(path+przestrzen_nazw+'__OT_ADMS_P Ws Cws.qml')
                    myLayerNode = root.findLayer(OT_ADMS_P_Msc.id())
                    myLayerNode.setExpanded(False)
                    myLayerNode = root.findLayer(OT_ADMS_P_Cms.id())
                    myLayerNode.setExpanded(False)
                    myLayerNode = root.findLayer(OT_ADMS_P_WsCws.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_ADMS_P_Msc = None
                    OT_ADMS_P_Cms = None
                    OT_ADMS_P_WsCws = None
            progress.setValue(9)            
            if os.path.exists(path+przestrzen_nazw+'__OT_KUSK_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_KUSK_A opis.qml"), path+przestrzen_nazw+'__OT_KUSK_A opis.qml')
                OT_KUSK_A_opis = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUSK_A."+formatPliku, przestrzen_nazw+"__OT_KUSK_A opis","ogr")
                if OT_KUSK_A_opis.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUSK_A_opis, False)
                    groupNapisy.addLayer(OT_KUSK_A_opis)
                    OT_KUSK_A_opis.loadNamedStyle(path+przestrzen_nazw+'__OT_KUSK_A opis.qml')
                    myLayerNode = root.findLayer(OT_KUSK_A_opis.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUSK_A_opis = None
            progress.setValue(10)            
            if os.path.exists(path+przestrzen_nazw+'__OT_KUKO_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_KUKO_A opis.qml"), path+przestrzen_nazw+'__OT_KUKO_A opis.qml')
                OT_KUKO_A_opis = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUKO_A."+formatPliku, przestrzen_nazw+"__OT_KUKO_A opis","ogr")
                if OT_KUKO_A_opis.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUKO_A_opis, False)
                    groupNapisy.addLayer(OT_KUKO_A_opis)
                    OT_KUKO_A_opis.loadNamedStyle(path+przestrzen_nazw+'__OT_KUKO_A opis.qml')
                    myLayerNode = root.findLayer(OT_KUKO_A_opis.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUKO_A_opis = None
            progress.setValue(11)            
            if os.path.exists(path+przestrzen_nazw+'__OT_KUZA_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_KUZA_A opis.qml"), path+przestrzen_nazw+'__OT_KUZA_A opis.qml')
                OT_KUZA_A_opis = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUZA_A."+formatPliku, przestrzen_nazw+"__OT_KUZA_A opis","ogr")
                if OT_KUZA_A_opis.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUZA_A_opis, False)
                    groupNapisy.addLayer(OT_KUZA_A_opis)
                    OT_KUZA_A_opis.loadNamedStyle(path+przestrzen_nazw+'__OT_KUZA_A opis.qml')
                    myLayerNode = root.findLayer(OT_KUZA_A_opis.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUZA_A_opis = None
            progress.setValue(12)            
            if os.path.exists(path+przestrzen_nazw+'__OT_KUOS_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_KUOS_A opis.qml"), path+przestrzen_nazw+'__OT_KUOS_A opis.qml')
                OT_KUOS_A_opis = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUOS_A."+formatPliku, przestrzen_nazw+"__OT_KUOS_A opis","ogr")
                if OT_KUOS_A_opis.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUOS_A_opis, False)
                    groupNapisy.addLayer(OT_KUOS_A_opis)
                    OT_KUOS_A_opis.loadNamedStyle(path+przestrzen_nazw+'__OT_KUOS_A opis.qml')
                    myLayerNode = root.findLayer(OT_KUOS_A_opis.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUOS_A_opis = None
            progress.setValue(13)            
            if os.path.exists(path+przestrzen_nazw+'__OT_BUIT_P.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUIT_P.qml"), path+przestrzen_nazw+'__OT_BUIT_P.qml')
                OT_BUIT_P = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUIT_P."+formatPliku, przestrzen_nazw+"__OT_BUIT_P","ogr")
                if OT_BUIT_P.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUIT_P, False)
                    groupPunktowe.addLayer(OT_BUIT_P)
                    myLayerNode = root.findLayer(OT_BUIT_P.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUIT_P = None
            progress.setValue(14)            
            if os.path.exists(path+przestrzen_nazw+'__OT_OIOR_P.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIOR_P.qml"), path+przestrzen_nazw+'__OT_OIOR_P.qml')
                OT_OIOR_P = QgsVectorLayer(path+przestrzen_nazw+"__OT_OIOR_P."+formatPliku, przestrzen_nazw+"__OT_OIOR_P","ogr")
                if OT_OIOR_P.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIOR_P, False)
                    groupPunktowe.addLayer(OT_OIOR_P)
                    myLayerNode = root.findLayer(OT_OIOR_P.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIOR_P = None
            progress.setValue(15)
            if os.path.exists(path+przestrzen_nazw+'__OT_OIKM_P.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIKM_P.qml"), path+przestrzen_nazw+'__OT_OIKM_P.qml')
                OT_OIKM_P = QgsVectorLayer(path+przestrzen_nazw+"__OT_OIKM_P."+formatPliku, przestrzen_nazw+"__OT_OIKM_P","ogr")
                if OT_OIKM_P.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIKM_P, False)
                    groupPunktowe.addLayer(OT_OIKM_P)
                    myLayerNode = root.findLayer(OT_OIKM_P.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIKM_P = None
            progress.setValue(16)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUWT_P.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUWT_P.qml"), path+przestrzen_nazw+'__OT_BUWT_P.qml')
                OT_BUWT_P = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUWT_P."+formatPliku, przestrzen_nazw+"__OT_BUWT_P","ogr")
                if OT_BUWT_P.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUWT_P, False)
                    groupPunktowe.addLayer(OT_BUWT_P)
                    myLayerNode = root.findLayer(OT_BUWT_P.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUWT_P = None
            progress.setValue(17)
            if os.path.exists(path+przestrzen_nazw+'__OT_KUKO_P.'+formatPliku):
                copyfile(qmlPath/Path("OT_KUKO_P.qml"), path+przestrzen_nazw+'__OT_KUKO_P.qml')
                OT_KUKO_P = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUKO_P."+formatPliku, przestrzen_nazw+"__OT_KUKO_P","ogr")
                if OT_KUKO_P.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUKO_P, False)
                    groupPunktowe.addLayer(OT_KUKO_P)
                    myLayerNode = root.findLayer(OT_KUKO_P.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUKO_P = None
            progress.setValue(18)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUZT_P.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUZT_P.qml"), path+przestrzen_nazw+'__OT_BUZT_P.qml')
                OT_BUZT_P = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUZT_P."+formatPliku, przestrzen_nazw+"__OT_BUZT_P","ogr")
                if OT_BUZT_P.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUZT_P, False)
                    groupPunktowe.addLayer(OT_BUZT_P)
                    myLayerNode = root.findLayer(OT_BUZT_P.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUZT_P = None
            progress.setValue(19)
            if os.path.exists(path+przestrzen_nazw+'__OT_OIPR_P.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIPR_P.qml"), path+przestrzen_nazw+'__OT_OIPR_P.qml')
                OT_OIPR_P = QgsVectorLayer(path+przestrzen_nazw+"__OT_OIPR_P."+formatPliku, przestrzen_nazw+"__OT_OIPR_P","ogr")
                if OT_OIPR_P.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIPR_P, False)
                    groupPunktowe.addLayer(OT_OIPR_P)
                    myLayerNode = root.findLayer(OT_OIPR_P.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIPR_P = None
            progress.setValue(20)           
            if os.path.exists(path+przestrzen_nazw+'__OT_BUIN_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUIN_L znaki punktowe.qml"), path+przestrzen_nazw+'__OT_BUIN_L znaki punktowe.qml')
                OT_BUIN_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUIN_L."+formatPliku, przestrzen_nazw+"__OT_BUIN_L","ogr")
                if OT_BUIN_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUIN_L, False)
                    groupPunktowe.addLayer(OT_BUIN_L)
                    OT_BUIN_L.loadNamedStyle(path+przestrzen_nazw+'__OT_BUIN_L znaki punktowe.qml')
                    myLayerNode = root.findLayer(OT_BUIN_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUIN_L = None
            progress.setValue(21)
            if os.path.exists(path+przestrzen_nazw+'__OT_ADJA_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_ADJA_A.qml"), path+przestrzen_nazw+'__OT_ADJA_A.qml')
                OT_ADJA_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_ADJA_A."+formatPliku, przestrzen_nazw+"__OT_ADJA_A","ogr")
                if OT_ADJA_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_ADJA_A, False)
                    group.addLayer(OT_ADJA_A)
                    myLayerNode = root.findLayer(OT_ADJA_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_ADJA_A = None
            progress.setValue(22)   
            if os.path.exists(path+przestrzen_nazw+'__OT_BUTR_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUTR_L.qml"), path+przestrzen_nazw+'__OT_BUTR_L.qml')
                OT_BUTR_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUTR_L."+formatPliku, przestrzen_nazw+"__OT_BUTR_L","ogr")
                if OT_BUTR_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUTR_L, False)
                    group.addLayer(OT_BUTR_L)
                    myLayerNode = root.findLayer(OT_BUTR_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUTR_L = None
            progress.setValue(23)
            if os.path.exists(path+przestrzen_nazw+'__OT_OIOR_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIOR_L.qml"), path+przestrzen_nazw+'__OT_OIOR_L.qml')
                OT_OIOR_L= QgsVectorLayer(path+przestrzen_nazw+"__OT_OIOR_L."+formatPliku, przestrzen_nazw+"__OT_OIOR_L","ogr")
                if OT_OIOR_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIOR_L, False)
                    group.addLayer(OT_OIOR_L)
                    myLayerNode = root.findLayer(OT_OIOR_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIOR_L = None
            progress.setValue(24)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUZT_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUZT_A.qml"), path+przestrzen_nazw+'__OT_BUZT_A.qml')
                OT_BUZT_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUZT_A."+formatPliku, przestrzen_nazw+"__OT_BUZT_A","ogr")
                if OT_BUZT_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUZT_A, False)
                    group.addLayer(OT_BUZT_A)
                    myLayerNode = root.findLayer(OT_BUZT_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUZT_A = None
            progress.setValue(25)
            if os.path.exists(path+przestrzen_nazw+'__OT_OIOR_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIOR_A.qml"), path+przestrzen_nazw+'__OT_OIOR_A.qml')
                OT_OIOR_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_OIOR_A."+formatPliku, przestrzen_nazw+"__OT_OIOR_A","ogr")
                if OT_OIOR_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIOR_A, False)
                    group.addLayer(OT_OIOR_A)
                    myLayerNode = root.findLayer(OT_OIOR_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIOR_A = None
            progress.setValue(26)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUSP_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUSP_L.qml"), path+przestrzen_nazw+'__OT_BUSP_L.qml')
                OT_BUSP_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUSP_L."+formatPliku, przestrzen_nazw+"__OT_BUSP_L","ogr")
                if OT_BUSP_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUSP_L, False)
                    group.addLayer(OT_BUSP_L)
                    myLayerNode = root.findLayer(OT_BUSP_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUSP_L = None
            progress.setValue(27)
            if os.path.exists(path+przestrzen_nazw+'__OT_SULN_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_SULN_L.qml"), path+przestrzen_nazw+'__OT_SULN_L.qml')
                OT_SULN_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SULN_L."+formatPliku, przestrzen_nazw+"__OT_SULN_L","ogr")
                if OT_SULN_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SULN_L, False)
                    group.addLayer(OT_SULN_L)
                    myLayerNode = root.findLayer(OT_SULN_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SULN_L = None
            progress.setValue(28)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKRP_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_SKRP_L polozenie 1.qml"), path+przestrzen_nazw+'__OT_SKRP_L polozenie 1.qml')
                OT_SKRP_Lp1 = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKRP_L."+formatPliku, przestrzen_nazw+"__OT_SKRP_L polozenie 1","ogr")
                if OT_SKRP_Lp1.featureCount()>0:
                    if formatPliku=="xml":
                        OT_SKRP_Lp1.setSubsetString("polozenie = 1")
                    if formatPliku=="shp":
                        OT_SKRP_Lp1.setSubsetString("POLOZENIE = 'ponadPowierzchniaGruntuPoziom1'")
                    if OT_SKRP_Lp1.featureCount()>0:
                        QgsProject.instance().addMapLayer(OT_SKRP_Lp1, False)
                        group.addLayer(OT_SKRP_Lp1)
                        OT_SKRP_Lp1.loadNamedStyle(path+przestrzen_nazw+'__OT_SKRP_L polozenie 1.qml')
                        myLayerNode = root.findLayer(OT_SKRP_Lp1.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKRP_Lp1 = None
            progress.setValue(29)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKTR_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SKTR_L.gfs"), path+przestrzen_nazw+'__OT_SKTR_L.gfs')
                copyfile(qmlPath/Path("OT_SKTR_L.qml"), path+przestrzen_nazw+'__OT_SKTR_L polozenie 1.qml')
                OT_SKTR_Lp1 = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKTR_L."+formatPliku, przestrzen_nazw+"__OT_SKTR_L polozenie 1","ogr")
                if OT_SKTR_Lp1.featureCount()>0:
                    if formatPliku=="xml":
                        OT_SKTR_Lp1.setSubsetString("POLOZENIE = '1'")
                        nazwa = QgsField('liniaKolejowa_tmp', QVariant.String )
                        OT_SKTR_Lp1.addExpressionField("regexp_substr(liniaKolejowa,'#(.*)')", nazwa)
                    if formatPliku=="shp":
                        OT_SKTR_Lp1.setSubsetString("POLOZENIE = 'ponadPowierzchniaGruntuPoziom1'")
                    QgsProject.instance().addMapLayer(OT_SKTR_Lp1, False)
                    group.addLayer(OT_SKTR_Lp1)
                    myLayerNode = root.findLayer(OT_SKTR_Lp1.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKTR_Lp1 = None
            progress.setValue(30)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKJZ_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_SKJZ_L polozenie 1, 2.qml"), path+przestrzen_nazw+'__OT_SKJZ_L polozenie 1, 2.qml')
                OT_SKJZ_Lp12 = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKJZ_L."+formatPliku, przestrzen_nazw+"__OT_SKJZ_L polozenie 1, 2","ogr")
                if OT_SKJZ_Lp12.featureCount()>0:
                    if formatPliku=="xml":
                        OT_SKJZ_Lp12.setSubsetString("polozenie = 1 or polozenie = 2 or (x_kodkarto10k = '0010_132')")   
                    if formatPliku=="shp":
                        OT_SKJZ_Lp12.setSubsetString("POLOZENIE = 'ponadPowierzchniaGruntuPoziom1' or POLOZENIE = 'ponadPowierzchniaGruntuPoziom2' or (KOD10k = '0010_132')") 
                    QgsProject.instance().addMapLayer(OT_SKJZ_Lp12, False)
                    group.addLayer(OT_SKJZ_Lp12)
                    OT_SKJZ_Lp12.loadNamedStyle(path+przestrzen_nazw+'__OT_SKJZ_L polozenie 1, 2.qml')
                    myLayerNode = root.findLayer(OT_SKJZ_Lp12.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKJZ_Lp12 = None
            progress.setValue(31)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUIN_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUIN_L.qml"), path+przestrzen_nazw+'__OT_BUIN_L.qml')
                OT_BUIN_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUIN_L."+formatPliku, przestrzen_nazw+"__OT_BUIN_L","ogr")
                if OT_BUIN_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUIN_L, False)
                    group.addLayer(OT_BUIN_L)
                    myLayerNode = root.findLayer(OT_BUIN_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUIN_L = None
            progress.setValue(32)    
            if os.path.exists(path+przestrzen_nazw+'__OT_BUBD_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUBD_A.qml"), path+przestrzen_nazw+'__OT_BUBD_A.qml')
                OT_BUBD_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUBD_A."+formatPliku, przestrzen_nazw+"__OT_BUBD_A","ogr")
                if OT_BUBD_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUBD_A, False)
                    group.addLayer(OT_BUBD_A)
                    myLayerNode = root.findLayer(OT_BUBD_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUBD_A = None
            progress.setValue(33)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUIT_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUIT_A.qml"), path+przestrzen_nazw+'__OT_BUIT_A.qml')
                OT_BUIT_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUIT_A."+formatPliku, przestrzen_nazw+"__OT_BUIT_A","ogr")
                if OT_BUIT_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUIT_A, False)
                    group.addLayer(OT_BUIT_A)
                    myLayerNode = root.findLayer(OT_BUIT_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUIT_A = None
            progress.setValue(34)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKTR_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SKTR_L.gfs"), path+przestrzen_nazw+'__OT_SKTR_L.gfs')
                copyfile(qmlPath/Path("OT_SKTR_L.qml"), path+przestrzen_nazw+'__OT_SKTR_L.qml')
                OT_SKTR_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKTR_L."+formatPliku, przestrzen_nazw+"__OT_SKTR_L","ogr")
                if OT_SKTR_L.featureCount()>0:
                    if formatPliku=="xml":
                        OT_SKTR_L.setSubsetString("POLOZENIE = '0'")
                        nazwa = QgsField('liniaKolejowa_tmp', QVariant.String )
                        OT_SKTR_L.addExpressionField("regexp_substr(liniaKolejowa,'#(.*)')", nazwa)  
                    if formatPliku=="shp":   
                        OT_SKTR_L.setSubsetString("POLOZENIE = 'naPowierzchniGruntu'")
                    QgsProject.instance().addMapLayer(OT_SKTR_L, False)
                    group.addLayer(OT_SKTR_L)
                    myLayerNode = root.findLayer(OT_SKTR_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKTR_L = None
            progress.setValue(35)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKJZ_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_SKJZ_L.qml"), path+przestrzen_nazw+'__OT_SKJZ_L.qml')
                OT_SKJZ_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKJZ_L."+formatPliku, przestrzen_nazw+"__OT_SKJZ_L","ogr")
                if OT_SKJZ_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SKJZ_L, False)
                    group.addLayer(OT_SKJZ_L)
                    myLayerNode = root.findLayer(OT_SKJZ_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKJZ_L = None
            progress.setValue(36)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUIB_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUIB_A.qml"), path+przestrzen_nazw+'__OT_BUIB_A.qml')
                OT_BUIB_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUIB_A."+formatPliku, przestrzen_nazw+"__OT_BUIB_A","ogr")
                if OT_BUIB_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUIB_A, False)
                    group.addLayer(OT_BUIB_A)
                    myLayerNode = root.findLayer(OT_BUIB_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUIB_A = None
            progress.setValue(37)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKTR_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_SKTR_L.qml"), path+przestrzen_nazw+'__OT_SKTR_L polozenie -1.qml')
                OT_SKTR_Lpm1 = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKTR_L."+formatPliku, przestrzen_nazw+"__OT_SKTR_L polozenie -1","ogr")
                if OT_SKTR_Lpm1.featureCount()>0:
                    if formatPliku=="xml":
                        OT_SKTR_Lpm1.setSubsetString("POLOZENIE = '-1'")
                        nazwa = QgsField('liniaKolejowa_tmp', QVariant.String )
                        OT_SKTR_Lpm1.addExpressionField("regexp_substr(liniaKolejowa,'#(.*)')", nazwa)
                    if formatPliku=="shp":
                        OT_SKTR_Lpm1.setSubsetString("POLOZENIE = 'podPowierzchniaGruntu'")
                    QgsProject.instance().addMapLayer(OT_SKTR_Lpm1, False)
                    group.addLayer(OT_SKTR_Lpm1)
                    myLayerNode = root.findLayer(OT_SKTR_Lpm1.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKTR_Lpm1 = None
            progress.setValue(38)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKJZ_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SKJZ_L.gfs"), path+przestrzen_nazw+'__OT_SKJZ_L.gfs')
                copyfile(qmlPath/Path("OT_SKJZ_L polozenie -1.qml"), path+przestrzen_nazw+'__OT_SKJZ_L polozenie -1.qml')
                OT_SKJZ_Lpm1 = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKJZ_L."+formatPliku, przestrzen_nazw+"__OT_SKJZ_L polozenie -1","ogr")
                if OT_SKJZ_Lpm1.featureCount()>0:
                    if formatPliku=="xml":
                        OT_SKJZ_Lpm1.setSubsetString("polozenie = -1")
                    if formatPliku=="shp":
                        OT_SKJZ_Lpm1.setSubsetString("POLOZENIE = 'podPowierzchniaGruntu'")
                    QgsProject.instance().addMapLayer(OT_SKJZ_Lpm1, False)
                    group.addLayer(OT_SKJZ_Lpm1)
                    OT_SKJZ_Lpm1.loadNamedStyle(path+przestrzen_nazw+'__OT_SKJZ_L polozenie -1.qml')
                    myLayerNode = root.findLayer(OT_SKJZ_Lpm1.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKJZ_Lpm1 = None
            progress.setValue(39)            
            if os.path.exists(path+przestrzen_nazw+'__OT_BUSP_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUSP_A.qml"), path+przestrzen_nazw+'__OT_BUSP_A.qml')
                OT_BUSP_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUSP_A."+formatPliku, przestrzen_nazw+"__OT_BUSP_A","ogr")
                if OT_BUSP_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUSP_A, False)
                    group.addLayer(OT_BUSP_A)
                    myLayerNode = root.findLayer(OT_BUSP_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUSP_A = None
            progress.setValue(40)
            if os.path.exists(path+przestrzen_nazw+'__OT_OIPR_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIPR_L.qml"), path+przestrzen_nazw+'__OT_OIPR_L.qml')
                OT_OIPR_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_OIPR_L."+formatPliku, przestrzen_nazw+"__OT_OIPR_L","ogr")
                if OT_OIPR_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIPR_L, False)
                    group.addLayer(OT_OIPR_L)
                    myLayerNode = root.findLayer(OT_OIPR_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIPR_L = None
            progress.setValue(41)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUZM_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUZM_L.qml"), path+przestrzen_nazw+'__OT_BUZM_L.qml')
                OT_BUZM_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUZM_L."+formatPliku, przestrzen_nazw+"__OT_BUZM_L","ogr")
                if OT_BUZM_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUZM_L, False)
                    group.addLayer(OT_BUZM_L)
                    myLayerNode = root.findLayer(OT_BUZM_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUZM_L = None
            progress.setValue(42)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUUO_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUUO_L.qml"), path+przestrzen_nazw+'__OT_BUUO_L.qml')
                OT_BUUO_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUUO_L."+formatPliku, przestrzen_nazw+"__OT_BUUO_L","ogr")
                if OT_BUUO_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUUO_L, False)
                    group.addLayer(OT_BUUO_L)
                    myLayerNode = root.findLayer(OT_BUUO_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUUO_L = None
            progress.setValue(43)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKRP_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SKRP_L.gfs"), path+przestrzen_nazw+'__OT_SKRP_L.gfs')
                copyfile(qmlPath/Path("OT_SKRP_L.qml"), path+przestrzen_nazw+'__OT_SKRP_L.qml')
                OT_SKRP_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKRP_L."+formatPliku, przestrzen_nazw+"__OT_SKRP_L","ogr")
                if OT_SKRP_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SKRP_L, False)
                    group.addLayer(OT_SKRP_L)
                    myLayerNode = root.findLayer(OT_SKRP_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKRP_L = None
            progress.setValue(44)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTPL_A.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_PTPL_A.gfs"), path+przestrzen_nazw+'__OT_PTPL_A.gfs')
                copyfile(qmlPath/Path("OT_PTPL_A.qml"), path+przestrzen_nazw+'__OT_PTPL_A.qml')
                OT_PTPL_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTPL_A."+formatPliku, przestrzen_nazw+"__OT_PTPL_A","ogr")
                if OT_PTPL_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTPL_A, False)
                    group.addLayer(OT_PTPL_A)
                    myLayerNode = root.findLayer(OT_PTPL_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTPL_A = None
            progress.setValue(45)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUHD_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUHD_A.qml"), path+przestrzen_nazw+'__OT_BUHD_A.qml')
                OT_BUHD_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUHD_A."+formatPliku, przestrzen_nazw+"__OT_BUHD_A","ogr")
                if OT_BUHD_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUHD_A, False)
                    group.addLayer(OT_BUHD_A)
                    myLayerNode = root.findLayer(OT_BUHD_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUHD_A = None
            progress.setValue(46)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUHD_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUHD_L.qml"), path+przestrzen_nazw+'__OT_BUHD_L.qml')
                OT_BUHD_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUHD_L."+formatPliku, przestrzen_nazw+"__OT_BUHD_L","ogr")
                if OT_BUHD_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUHD_L, False)
                    group.addLayer(OT_BUHD_L)
                    myLayerNode = root.findLayer(OT_BUHD_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUHD_L = None
            progress.setValue(47)
            if os.path.exists(path+przestrzen_nazw+'__OT_SKPP_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_SKPP_L.qml"), path+przestrzen_nazw+'__OT_SKPP_L.qml')
                OT_SKPP_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SKPP_L."+formatPliku, przestrzen_nazw+"__OT_SKPP_L","ogr")
                if OT_SKPP_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SKPP_L, False)
                    group.addLayer(OT_SKPP_L)
                    myLayerNode = root.findLayer(OT_SKPP_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SKPP_L = None
            progress.setValue(48)
            if os.path.exists(path+przestrzen_nazw+'__OT_SUPR_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_SUPR_L.qml"), path+przestrzen_nazw+'__OT_SUPR_L.qml')
                OT_SUPR_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SUPR_L."+formatPliku, przestrzen_nazw+"__OT_SUPR_L","ogr")
                if OT_SUPR_L.featureCount()>0:
                    if formatPliku=="xml":
                        OT_SUPR_L.setSubsetString("x_kodKarto10k IS NOT NULL")
                    if formatPliku=="shp":
                        OT_SUPR_L.setSubsetString("KOD10K IS NOT NULL")
                    QgsProject.instance().addMapLayer(OT_SUPR_L, False)
                    group.addLayer(OT_SUPR_L)
                    myLayerNode = root.findLayer(OT_SUPR_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SUPR_L = None
            progress.setValue(49)            
            if os.path.exists(path+przestrzen_nazw+'__OT_KUKO_A.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_KUKO_A.gfs"), path+przestrzen_nazw+'__OT_KUKO_A.gfs')
                copyfile(qmlPath/Path("OT_KUKO_A.qml"), path+przestrzen_nazw+'__OT_KUKO_A.qml')
                OT_KUKO_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUKO_A."+formatPliku, przestrzen_nazw+"__OT_KUKO_A","ogr")
                if OT_KUKO_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUKO_A, False)
                    group.addLayer(OT_KUKO_A)
                    myLayerNode = root.findLayer(OT_KUKO_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUKO_A = None
            progress.setValue(50)
            if os.path.exists(path+przestrzen_nazw+'__OT_OISZ_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_OISZ_A.qml"), path+przestrzen_nazw+'__OT_OISZ_A.qml')
                OT_OISZ_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_OISZ_A."+formatPliku, przestrzen_nazw+"__OT_OISZ_A","ogr")
                if OT_OISZ_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OISZ_A, False)
                    group.addLayer(OT_OISZ_A)
                    myLayerNode = root.findLayer(OT_OISZ_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OISZ_A = None
            progress.setValue(51)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTWP_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTWP_A.qml"), path+przestrzen_nazw+'__OT_PTWP_A.qml')
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_PTWP_A.gfs"), path+przestrzen_nazw+'__OT_PTWP_A.gfs')
                OT_PTWP_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTWP_A."+formatPliku, przestrzen_nazw+"__OT_PTWP_A","ogr")
                if OT_PTWP_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTWP_A, False)
                    group.addLayer(OT_PTWP_A)
                    myLayerNode = root.findLayer(OT_PTWP_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTWP_A = None
            progress.setValue(52)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTSO_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTSO_A.qml"), path+przestrzen_nazw+'__OT_PTSO_A.qml')
                OT_PTSO_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTSO_A."+formatPliku, przestrzen_nazw+"__OT_PTSO_A","ogr")
                if OT_PTSO_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTSO_A, False)
                    group.addLayer(OT_PTSO_A)
                    myLayerNode = root.findLayer(OT_PTSO_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTSO_A = None
            progress.setValue(53)
            if os.path.exists(path+przestrzen_nazw+'__OT_SWRM_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SWRM_L.gfs"), path+przestrzen_nazw+'__OT_SWRM_L.gfs')
                copyfile(qmlPath/Path("OT_SWRM_L.qml"), path+przestrzen_nazw+'__OT_SWRM_L.qml')
                OT_SWRM_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SWRM_L."+formatPliku, przestrzen_nazw+"__OT_SWRM_L","ogr")
                if OT_SWRM_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SWRM_L, False)
                    group.addLayer(OT_SWRM_L)
                    myLayerNode = root.findLayer(OT_SWRM_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SWRM_L = None
            progress.setValue(54)
            if os.path.exists(path+przestrzen_nazw+'__OT_SWKN_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SWKN_L.gfs"), path+przestrzen_nazw+'__OT_SWKN_L.gfs')
                copyfile(qmlPath/Path("OT_SWKN_L.qml"), path+przestrzen_nazw+'__OT_SWKN_L.qml')
                OT_SWKN_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SWKN_L."+formatPliku, przestrzen_nazw+"__OT_SWKN_L","ogr")
                if OT_SWKN_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SWKN_L, False)
                    group.addLayer(OT_SWKN_L)
                    myLayerNode = root.findLayer(OT_SWKN_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SWKN_L = None
            progress.setValue(55)
            if os.path.exists(path+przestrzen_nazw+'__OT_SWRS_L.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_SWRS_L.gfs"), path+przestrzen_nazw+'__OT_SWRS_L.gfs')
                copyfile(qmlPath/Path("OT_SWRS_L.qml"), path+przestrzen_nazw+'__OT_SWRS_L.qml')
                OT_SWRS_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_SWRS_L."+formatPliku, przestrzen_nazw+"__OT_SWRS_L","ogr")
                if OT_SWRS_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_SWRS_L, False)
                    group.addLayer(OT_SWRS_L)
                    myLayerNode = root.findLayer(OT_SWRS_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_SWRS_L = None
            progress.setValue(56)
            if os.path.exists(path+przestrzen_nazw+'__OT_OIKM_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIKM_L.qml"), path+przestrzen_nazw+'__OT_OIKM_L.qml')
                OT_OIKM_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_OIKM_L."+formatPliku, przestrzen_nazw+"__OT_OIKM_L","ogr")
                if OT_OIKM_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIKM_L, False)
                    group.addLayer(OT_OIKM_L)
                    myLayerNode = root.findLayer(OT_OIKM_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIKM_L = None
            progress.setValue(57)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUIB_L.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUIB_L.qml"), path+przestrzen_nazw+'__OT_BUIB_L.qml')
                OT_BUIB_L = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUIB_L."+formatPliku, przestrzen_nazw+"__OT_BUIB_L","ogr")
                if OT_BUIB_L.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUIB_L, False)
                    group.addLayer(OT_BUIB_L)
                    myLayerNode = root.findLayer(OT_BUIB_L.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUIB_L = None
            progress.setValue(58)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTKM_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTKM_A.qml"), path+przestrzen_nazw+'__OT_PTKM_A.qml')
                OT_PTKM_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTKM_A."+formatPliku, przestrzen_nazw+"__OT_PTKM_A","ogr")
                if OT_PTKM_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTKM_A, False)
                    group.addLayer(OT_PTKM_A)
                    myLayerNode = root.findLayer(OT_PTKM_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTKM_A = None
            progress.setValue(59)
            if os.path.exists(path+przestrzen_nazw+'__OT_TCPK_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_TCPK_A.qml"), path+przestrzen_nazw+'__OT_TCPK_A.qml')
                OT_TCPK_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_TCPK_A."+formatPliku, przestrzen_nazw+"__OT_TCPK_A","ogr")
                if OT_TCPK_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_TCPK_A, False)
                    group.addLayer(OT_TCPK_A)
                    myLayerNode = root.findLayer(OT_TCPK_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_TCPK_A = None
            progress.setValue(60)
            if os.path.exists(path+przestrzen_nazw+'__OT_TCPN_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_TCPN_A.qml"), path+przestrzen_nazw+'__OT_TCPN_A.qml')
                OT_TCPN_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_TCPN_A."+formatPliku, przestrzen_nazw+"__OT_TCPN_A","ogr")
                if OT_TCPN_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_TCPN_A, False)
                    group.addLayer(OT_TCPN_A)
                    myLayerNode = root.findLayer(OT_TCPN_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_TCPN_A = None
            progress.setValue(61)
            if os.path.exists(path+przestrzen_nazw+'__OT_TCRZ_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_TCRZ_A.qml"), path+przestrzen_nazw+'__OT_TCRZ_A.qml')
                OT_TCRZ_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_TCRZ_A."+formatPliku, przestrzen_nazw+"__OT_TCRZ_A","ogr")
                if OT_TCRZ_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_TCRZ_A, False)
                    group.addLayer(OT_TCRZ_A)
                    myLayerNode = root.findLayer(OT_TCRZ_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_TCRZ_A = None
            progress.setValue(62)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTRK_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTRK_A.qml"), path+przestrzen_nazw+'__OT_PTRK_A.qml')
                OT_PTRK_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTRK_A."+formatPliku, przestrzen_nazw+"__OT_PTRK_A","ogr")
                if OT_PTRK_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTRK_A, False)
                    group.addLayer(OT_PTRK_A)
                    myLayerNode = root.findLayer(OT_PTRK_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTRK_A = None
            progress.setValue(63) 
            if os.path.exists(path+przestrzen_nazw+'__OT_KUIK_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_KUIK_A.qml"), path+przestrzen_nazw+'__OT_KUIK_A.qml')
                OT_KUIK_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUIK_A."+formatPliku, przestrzen_nazw+"__OT_KUIK_A","ogr")
                if OT_KUIK_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUIK_A, False)
                    group.addLayer(OT_KUIK_A)
                    myLayerNode = root.findLayer(OT_KUIK_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUIK_A = None
            progress.setValue(64)
            if os.path.exists(path+przestrzen_nazw+'__OT_OIMK_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_OIMK_A.qml"), path+przestrzen_nazw+'__OT_OIMK_A.qml')
                OT_OIMK_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_OIMK_A."+formatPliku, przestrzen_nazw+"__OT_OIMK_A","ogr")
                if OT_OIMK_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_OIMK_A, False)
                    group.addLayer(OT_OIMK_A)
                    myLayerNode = root.findLayer(OT_OIMK_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_OIMK_A = None
            progress.setValue(65)
            if os.path.exists(path+przestrzen_nazw+'__OT_KUSC_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_KUSC_A.qml"), path+przestrzen_nazw+'__OT_KUSC_A.qml')
                OT_KUSC_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUSC_A."+formatPliku, przestrzen_nazw+"__OT_KUSC_A","ogr")
                if OT_KUSC_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_KUSC_A, False)
                    group.addLayer(OT_KUSC_A)
                    myLayerNode = root.findLayer(OT_KUSC_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUSC_A = None
            progress.setValue(66)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTZB_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTZB_A.qml"), path+przestrzen_nazw+'__OT_PTZB_A.qml')
                OT_PTZB_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTZB_A."+formatPliku, przestrzen_nazw+"__OT_PTZB_A","ogr")
                if OT_PTZB_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTZB_A, False)
                    group.addLayer(OT_PTZB_A)
                    myLayerNode = root.findLayer(OT_PTZB_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTZB_A = None
            progress.setValue(67)
            if os.path.exists(path+przestrzen_nazw+'__OT_KUPG_A.'+formatPliku):
                if formatPliku=="xml":
                    copyfile(gfsPath/Path("OT_KUPG_A.gfs"), path+przestrzen_nazw+'__OT_KUPG_A.gfs')
                copyfile(qmlPath/Path("OT_KUPG_A.qml"), path+przestrzen_nazw+'__OT_KUPG_A.qml')
                OT_KUPG_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_KUPG_A."+formatPliku, przestrzen_nazw+"__OT_KUPG_A","ogr")
                if OT_KUPG_A.featureCount()>0:
                    if formatPliku=="xml":
                        nazwa = QgsField('elektrownia_tmp', QVariant.String )
                        OT_KUPG_A.addExpressionField("regexp_substr(elektrownia,'#(.*)')", nazwa)
                        nazwa = QgsField('kopalnia_tmp', QVariant.String )
                        OT_KUPG_A.addExpressionField("regexp_substr(kopalnia,'#(.*)')", nazwa)
                    QgsProject.instance().addMapLayer(OT_KUPG_A, False)
                    group.addLayer(OT_KUPG_A)
                    myLayerNode = root.findLayer(OT_KUPG_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_KUPG_A = None
            progress.setValue(68)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTTR_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTTR_A.qml"), path+przestrzen_nazw+'__OT_PTTR_A.qml')
                OT_PTTR_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTTR_A."+formatPliku, przestrzen_nazw+"__OT_PTTR_A","ogr")
                if OT_PTTR_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTTR_A, False)
                    group.addLayer(OT_PTTR_A)
                    myLayerNode = root.findLayer(OT_PTTR_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTTR_A = None
            progress.setValue(69)
            if os.path.exists(path+przestrzen_nazw+'__OT_BUCM_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_BUCM_A.qml"), path+przestrzen_nazw+'__OT_BUCM_A.qml')
                OT_BUCM_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_BUCM_A."+formatPliku, przestrzen_nazw+"__OT_BUCM_A","ogr")
                if OT_BUCM_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_BUCM_A, False)
                    group.addLayer(OT_BUCM_A)
                    myLayerNode = root.findLayer(OT_BUCM_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_BUCM_A = None
            progress.setValue(70)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTWZ_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTWZ_A.qml"), path+przestrzen_nazw+'__OT_PTWZ_A.qml')
                OT_PTWZ_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTWZ_A."+formatPliku, przestrzen_nazw+"__OT_PTWZ_A","ogr")
                if OT_PTWZ_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTWZ_A, False)
                    group.addLayer(OT_PTWZ_A)
                    myLayerNode = root.findLayer(OT_PTWZ_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTWZ_A = None
            progress.setValue(71)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTGN_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTGN_A.qml"), path+przestrzen_nazw+'__OT_PTGN_A.qml')
                OT_PTGN_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTGN_A."+formatPliku, przestrzen_nazw+"__OT_PTGN_A","ogr")
                if OT_PTGN_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTGN_A, False)
                    group.addLayer(OT_PTGN_A)
                    myLayerNode = root.findLayer(OT_PTGN_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTGN_A = None
            progress.setValue(72)   
            if os.path.exists(path+przestrzen_nazw+'__OT_PTUT_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTUT_A.qml"), path+przestrzen_nazw+'__OT_PTUT_A.qml')
                OT_PTUT_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTUT_A."+formatPliku, przestrzen_nazw+"__OT_PTUT_A","ogr")
                if OT_PTUT_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTUT_A, False)
                    group.addLayer(OT_PTUT_A)
                    myLayerNode = root.findLayer(OT_PTUT_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTUT_A = None
            progress.setValue(73)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTLZ_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTLZ_A.qml"), path+przestrzen_nazw+'__OT_PTLZ_A.qml')
                OT_PTLZ_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTLZ_A."+formatPliku, przestrzen_nazw+"__OT_PTLZ_A","ogr")
                if OT_PTLZ_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_PTLZ_A, False)
                    group.addLayer(OT_PTLZ_A)
                    myLayerNode = root.findLayer(OT_PTLZ_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTLZ_A = None
            progress.setValue(74)
            if os.path.exists(path+przestrzen_nazw+'__OT_TCON_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_TCON_A.qml"), path+przestrzen_nazw+'__OT_TCON_A.qml')
                OT_TCON_A = QgsVectorLayer(path+przestrzen_nazw+"__OT_TCON_A."+formatPliku, przestrzen_nazw+"__OT_TCON_A","ogr")
                if OT_TCON_A.featureCount()>0:
                    QgsProject.instance().addMapLayer(OT_TCON_A, False)
                    group.addLayer(OT_TCON_A)
                    myLayerNode = root.findLayer(OT_TCON_A.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_TCON_A = None
            progress.setValue(75)
            if os.path.exists(path+przestrzen_nazw+'__OT_PTZB_A.'+formatPliku):
                copyfile(qmlPath/Path("OT_PTZB_A_100k.qml"), path+przestrzen_nazw+'__OT_PTZB_A_100k.qml')
                OT_PTZB_A_100k = QgsVectorLayer(path+przestrzen_nazw+"__OT_PTZB_A."+formatPliku, przestrzen_nazw+"__OT_PTZB_A_100k","ogr")
                if OT_PTZB_A_100k.featureCount()>0:
                    OT_PTZB_A_100k.loadNamedStyle(path+przestrzen_nazw+'__OT_PTZB_A_100k.qml')
                    QgsProject.instance().addMapLayer(OT_PTZB_A_100k, False)
                    group.addLayer(OT_PTZB_A_100k)
                    myLayerNode = root.findLayer(OT_PTZB_A_100k.id())
                    myLayerNode.setExpanded(False)
                else:
                    OT_PTZB_A_100k = None
            progress.setValue(76)

            #join do warstwy nazwy_ulic
            if  os.path.exists(path+przestrzen_nazw+'__OT_Ulica.xml') and OT_Ulica != None and nazwy_ulic != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('ulica_3_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa2','przedrostek2','nazwa1','przedrostek1'])
                joinObject.setJoinLayerId(OT_Ulica.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Ulica)
                nazwy_ulic.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy nazwy_ulic
                nazwa2 = QgsField( 'ul_nazwa2', QVariant.String )
                nazwy_ulic.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_nazwa2"', nazwa2)
                przedrostek2 = QgsField( 'ul_przedr2', QVariant.String )
                nazwy_ulic.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_przedrostek2"', przedrostek2)
                nazwa1 = QgsField( 'ul_nazwa1', QVariant.String )
                nazwy_ulic.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_nazwa1"', nazwa1)
                przedrostek1 = QgsField( 'ul_przedr1', QVariant.String )
                nazwy_ulic.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_przedrostek1"', przedrostek1)
            progress.setValue(77)
            
            #join do warstwy nazwy_placow
            if os.path.exists(path+przestrzen_nazw+'__OT_Ulica.xml') and OT_Ulica != None and nazwy_placow != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('ulica5_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa1','nazwa2','przedrostek1','przedrostek2'])
                joinObject.setJoinLayerId(OT_Ulica.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Ulica)
                nazwy_placow.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy nazwy_placow
                nazwa1 = QgsField( 'ul_nazwa1', QVariant.String )
                nazwy_placow.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_nazwa1"', nazwa1)
                nazwa2 = QgsField( 'ul_nazwa2', QVariant.String )
                nazwy_placow.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_nazwa2"', nazwa2)
                przedrostek1 = QgsField( 'ul_przedr1', QVariant.String )
                nazwy_placow.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_przedrostek1"', przedrostek1)
                przedrostek2 = QgsField( 'ul_przedr2', QVariant.String )
                nazwy_placow.addExpressionField('"'+przestrzen_nazw+'__OT_Ulica_przedrostek2"', przedrostek2)
            progress.setValue(78)
            
            #join do warstwy OT_PTWP_A
            if os.path.exists(path+przestrzen_nazw+'__OT_ZbiornikWodny.xml') and OT_Ciek != None and os.path.exists(path+przestrzen_nazw+'__OT_Ciek.xml') and OT_ZbiornikWodny != None and OT_PTWP_A != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('zbiornikWodny1_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa'])
                joinObject.setJoinLayerId(OT_ZbiornikWodny.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_ZbiornikWodny)
                OT_PTWP_A.addJoin(joinObject)
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('ciek2_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa'])
                joinObject.setJoinLayerId(OT_Ciek.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Ciek)
                OT_PTWP_A.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy OT_PTWP_A
                nazwa = QgsField( 'ZB_NAZWA', QVariant.String )
                OT_PTWP_A.addExpressionField('"'+przestrzen_nazw+'__OT_ZbiornikWodny_nazwa"', nazwa)
            progress.setValue(79)
            
            #join do warstwy nazwy_rzek_nad_linia
            if os.path.exists(path+przestrzen_nazw+'__OT_Ciek.xml') and OT_Ciek != None and nazwy_rzek_nad_linia != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('ciek1_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa'])
                joinObject.setJoinLayerId(OT_Ciek.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Ciek)
                nazwy_rzek_nad_linia.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy nazwy_rzek_nad_linia
                nazwa = QgsField( 'CIEK_NAZWA', QVariant.String )
                nazwy_rzek_nad_linia.addExpressionField('"'+przestrzen_nazw+'__OT_Ciek_nazwa"', nazwa)
            progress.setValue(80)
            
            #join do warstwy nazwy_rzek_na_linii
            if os.path.exists(path+przestrzen_nazw+'__OT_Ciek.xml') and OT_Ciek != None and nazwy_rzek_na_linii != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('ciek1_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa'])
                joinObject.setJoinLayerId(OT_Ciek.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Ciek)
                nazwy_rzek_na_linii.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy nazwy_rzek_na_linii
                nazwa = QgsField( 'CIEK_NAZWA', QVariant.String )
                nazwy_rzek_na_linii.addExpressionField('"'+przestrzen_nazw+'__OT_Ciek_nazwa"', nazwa)
            progress.setValue(81)
            
            #join do warstwy nazwy_kanalow_nad_linia
            if os.path.exists(path+przestrzen_nazw+'__OT_Ciek.xml') and OT_Ciek != None and nazwy_kanalow_nad_linia != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('ciek1_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa'])
                joinObject.setJoinLayerId(OT_Ciek.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Ciek)
                nazwy_kanalow_nad_linia.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy nazwy_kanalow_nad_linia
                nazwa = QgsField( 'CIEK_NAZWA', QVariant.String )
                nazwy_kanalow_nad_linia.addExpressionField('"'+przestrzen_nazw+'__OT_Ciek_nazwa"', nazwa)
            progress.setValue(82)
            
            #join do warstwy nazwy_kanalow_na_linii
            if os.path.exists(path+przestrzen_nazw+'__OT_Ciek.xml') and OT_Ciek != None and nazwy_kanalow_na_linii != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('ciek1_tmp')
                joinObject.setJoinFieldNamesSubset(['nazwa'])
                joinObject.setJoinLayerId(OT_Ciek.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Ciek)
                nazwy_kanalow_na_linii.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy nazwy_kanalow_na_linii
                nazwa = QgsField( 'CIEK_NAZWA', QVariant.String )
                nazwy_kanalow_na_linii.addExpressionField('"'+przestrzen_nazw+'__OT_Ciek_nazwa"', nazwa)
            progress.setValue(83)
            
            #join do warstwy OT_KUPG_A
            if os.path.exists(path+przestrzen_nazw+'__OT_Elektrownia.xml') and OT_Elektrownia!= None and OT_KUPG_A != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('elektrownia_tmp')
                joinObject.setJoinFieldNamesSubset(['rodzaj'])
                joinObject.setJoinLayerId(OT_Elektrownia.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Elektrownia)
                OT_KUPG_A.addJoin(joinObject)
            if os.path.exists(path+przestrzen_nazw+'__OT_Kopalnia.xml') and OT_Kopalnia != None and OT_KUPG_A != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('kopalnia_tmp')
                joinObject.setJoinFieldNamesSubset(['rodzaj','kopalina'])
                joinObject.setJoinLayerId(OT_Kopalnia.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Kopalnia)
                OT_KUPG_A.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy OT_KUPG_A
                nazwa = QgsField( 'elektrownia_rodzaj', QVariant.String )
                OT_KUPG_A.addExpressionField('"'+przestrzen_nazw+'__OT_Elektrownia_rodzaj"', nazwa)
                nazwa = QgsField( 'kopalnia_kopalina', QVariant.String )
                OT_KUPG_A.addExpressionField('"'+przestrzen_nazw+'__OT_Kopalnia_kopalina"', nazwa)
                nazwa = QgsField( 'kopalnia_rodzaj', QVariant.String )
                OT_KUPG_A.addExpressionField('"'+przestrzen_nazw+'__OT_Kopalnia_rodzaj"', nazwa)
            progress.setValue(84)
            
            #join do warstwy OT_KUKO_A
            if os.path.exists(path+przestrzen_nazw+'__OT_Lotnisko.xml') and OT_Lotnisko != None and OT_KUKO_A != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('kuko_a3_tmp')
                joinObject.setTargetFieldName('gml_id')
                joinObject.setJoinFieldNamesSubset(['idIata','idIcao','rodzaj'])
                joinObject.setJoinLayerId(OT_Lotnisko.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Lotnisko)
                OT_KUKO_A.addJoin(joinObject)
            if os.path.exists(path+przestrzen_nazw+'__OT_Port.xml') and OT_Port != None and OT_KUKO_A != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('port_tmp')
                joinObject.setJoinFieldNamesSubset(['lokalizacjaPortu','rodzaj'])
                joinObject.setJoinLayerId(OT_Port.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_Port)
                OT_KUKO_A.addJoin(joinObject)        
                #dodanie kolumn wirtualnych do warstwy OT_KUKO_A
                nazwa = QgsField( 'lotnisko_rodzaj', QVariant.String )
                OT_KUKO_A.addExpressionField('"'+przestrzen_nazw+'__OT_Lotnisko_rodzaj"', nazwa)
                nazwa = QgsField( 'lotnisko_idIata', QVariant.String )
                OT_KUKO_A.addExpressionField('"'+przestrzen_nazw+'__OT_Lotnisko_idIata"', nazwa)  
                nazwa = QgsField( 'lotnisko_idIcao', QVariant.String )
                OT_KUKO_A.addExpressionField('"'+przestrzen_nazw+'__OT_Lotnisko_idIcao"', nazwa)
                nazwa = QgsField( 'port_rodzaj', QVariant.String )
                OT_KUKO_A.addExpressionField('"'+przestrzen_nazw+'__OT_Port_rodzaj"', nazwa)
                nazwa = QgsField( 'port_lokalizacjaPortu', QVariant.String )
                OT_KUKO_A.addExpressionField('"'+przestrzen_nazw+'__OT_Port_lokalizacjaPortu"', nazwa)
            progress.setValue(85)
            
            #join do warstwy OT_SKTR_L
            if os.path.exists(path+przestrzen_nazw+'__OT_LiniaKolejowa.xml') and OT_LiniaKolejowa != None and OT_SKTR_L != None:
                joinObject = QgsVectorLayerJoinInfo()
                joinObject.setJoinFieldName('gml_id')
                joinObject.setTargetFieldName('liniaKolejowa_tmp')
                joinObject.setJoinFieldNamesSubset(['nrLinii'])
                joinObject.setJoinLayerId(OT_LiniaKolejowa.id())
                joinObject.setUsingMemoryCache(True)
                joinObject.setJoinLayer(OT_LiniaKolejowa)
                OT_SKTR_L.addJoin(joinObject)
                #dodanie kolumn wirtualnych do warstwy OT_SKTR_L
                nazwa = QgsField( 'nrLinii', QVariant.String )
                OT_SKTR_L.addExpressionField('"'+przestrzen_nazw+'__OT_LiniaKolejowa_nrLinii"', nazwa)
            
            progress.setValue(86)
            time.sleep(1)
            iface.messageBar().clearWidgets()    
    pass
